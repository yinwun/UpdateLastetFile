using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace UpdateFiles
{
    class Program
    {
        static void Main(string[] args)
        {
            StartApp();
        }

        private static void StartApp()
        {
            /*
            *  1. 1 for retrieving account from XZ
            *  2. 2 for Copy file
            */
            IniPorperties ini = new IniPorperties();
            if (ini.IniType.Equals("1"))
            {
                WatcherStrat(ini.IniXZLog, "*Log.txt*");
            }
            else if (ini.IniType.Equals("2"))
            {
                WatcherStrat(ini.IniNetPath, "Configuration.ini");
            }

            Console.ReadKey();
        }

        #region Watch File

        private static void WatcherStrat(string path, string filter)
        {

            FileSystemWatcher watcher = new FileSystemWatcher();
            watcher.Path = path;
            watcher.Filter = filter;
            watcher.Changed += new FileSystemEventHandler(OnProcess);
            watcher.Created += new FileSystemEventHandler(OnProcess);
            watcher.Deleted += new FileSystemEventHandler(OnProcess);
            watcher.Renamed += new RenamedEventHandler(OnRenamed);
            watcher.EnableRaisingEvents = true;
            watcher.NotifyFilter = NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName | NotifyFilters.FileName | NotifyFilters.LastAccess
                                   | NotifyFilters.LastWrite | NotifyFilters.Security | NotifyFilters.Size;
            watcher.IncludeSubdirectories = true;
        }
        private static void OnProcess(object source, FileSystemEventArgs e)
        {
            if (e.ChangeType == WatcherChangeTypes.Created)
            {
                OnCreated(source, e);
            }
            else if (e.ChangeType == WatcherChangeTypes.Changed)
            {
                OnChanged(source, e);
            }
            else if (e.ChangeType == WatcherChangeTypes.Deleted)
            {
                OnDeleted(source, e);
            }

        }
        private static void OnCreated(object source, FileSystemEventArgs e)
        {
            Console.WriteLine("文件新建事件处理逻辑 {0}  {1}  {2}", e.ChangeType, e.FullPath, e.Name);
        }
        private static void OnChanged(object source, FileSystemEventArgs e)
        {
            //Console.WriteLine("文件改变事件处理逻辑{0}  {1}  {2}", e.ChangeType, e.FullPath, e.Name);
            IniPorperties ini = new IniPorperties();
            if (ini.IniType.Equals("1"))
            {
                //WatcherStrat(@"C:\Working\Test", "*Log.txt*");
                 Console.WriteLine("文件改变事件处理逻辑{0}  {1}  {2}", e.ChangeType, e.FullPath, e.Name);
            }
            else if (ini.IniType.Equals("2"))
            {
                UpdateLastestFiles();
            }
        }
        private static void OnDeleted(object source, FileSystemEventArgs e)
        {
            Console.WriteLine("文件删除事件处理逻辑{0}  {1}   {2}", e.ChangeType, e.FullPath, e.Name);
        }
        private static void OnRenamed(object source, RenamedEventArgs e)
        {
            Console.WriteLine("文件重命名事件处理逻辑{0}  {1}  {2}", e.ChangeType, e.FullPath, e.Name);
        }

        #endregion

        #region Handle Account Create

        #endregion

        #region Update Files from Net to Local (XP and Win7)

        private static void UpdateLastestFiles()
        {
            IniPorperties ini = new IniPorperties();
            if (ini.OS.Equals("w7"))
            {
                HandleW7();
            }
            else if (ini.OS.Equals("xp"))
            {
                HandleXP();
            }
            else if (ini.OS.Equals("w7xp"))
            {
                HandleW7();
                HandleXP();
            }

        }

        internal static bool CheckINIVersion()
        {
            bool isUpdate = false;
            IniPorperties ini = new IniPorperties();
            if (ini.IniUpdate.Equals("1"))
            {
                File.Copy(ini.IniNetPathFile, ini.IniLocalPathFile, true);
                isUpdate = true;
            }

            return isUpdate;
        }
    
        internal static void HandleXP()
        {
            IniPorperties ini = new IniPorperties();
            string pc = RetrieveHost(ini.ListXPSPECDICT);
            string netPathPC = Path.Combine(ini.XPNETPATHHOME, pc);
            DirectoryCopy(netPathPC, ini.XPLOCALPATHHOME, true);

        }

        internal static void HandleW7()
        {
            IniPorperties ini = new IniPorperties();
            string pc = RetrieveHost(ini.ListW7SPECDICT);
            string netPathPC = Path.Combine(ini.W7NETPATHHOME, pc);
            DirectoryCopy(netPathPC, ini.W7LOCALPATHHOME, true);
        }

        internal static string RetrieveHost(Dictionary<string, string> dictSPEC)
        {
            string host = String.Empty;
            IniPorperties ini = new IniPorperties();
            using (StreamReader sr = new StreamReader(ini.HOST))
            {
                string line;
                // Read and display lines from the file until the end of 
                // the file is reached.
                while ((line = sr.ReadLine()) != null)
                {
                    host = line;
                }
            }

            //string pcPath = ini.ListXPSPECDICT[host];
            string pcPath = dictSPEC[host];

            return pcPath;
        }

        internal static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
        {
            DirectoryInfo dir = new DirectoryInfo(sourceDirName);
            DirectoryInfo[] dirs = dir.GetDirectories();

            // If the source directory does not exist, throw an exception.
            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirName);
            }

            // If the destination directory does not exist, create it.
            if (!Directory.Exists(destDirName))
            {
                Directory.CreateDirectory(destDirName);
            }

            // Get the file contents of the directory to copy.
            FileInfo[] files = dir.GetFiles();

            foreach (FileInfo file in files)
            {
                // Create the path to the new copy of the file.
                string temppath = Path.Combine(destDirName, file.Name);

                // Copy the file.
                file.CopyTo(temppath, true);
            }

            // If copySubDirs is true, copy the subdirectories.
            if (copySubDirs)
            {
                foreach (DirectoryInfo subdir in dirs)
                {
                    // Create the subdirectory.
                    string temppath = Path.Combine(destDirName, subdir.Name);

                    // Copy the subdirectories.
                    DirectoryCopy(subdir.FullName, temppath, copySubDirs);
                }
            }
        }

        #endregion
    }
}
